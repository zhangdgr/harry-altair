import streamlit as st
import pandas as pd
import altair as alt

st.set_page_config(page_title="Inside Airbnb Dashboard", layout="wide")

alt.data_transformers.disable_max_rows()
listings_data = pd.read_csv('listings.csv')

# A little cleaning
listings_data['price'] = listings_data['price'].replace('[\$,]', '', regex=True).astype(float)
filtered_data = listings_data[
    (listings_data['estimated_revenue_l365d'].notnull()) &
    (listings_data['estimated_revenue_l365d'] > 0) &
    (listings_data['price'].notnull()) &
    (listings_data['review_scores_rating'].notnull())
]

st.title("Airbnb Revenue in Barcelona: The City of Counts")

st.markdown("""
### Variables Used in Graphs Defined
- **Neighborhood**: Neighborhood where listing is located.
- **Room Type**: Type of room listed.
- **Review Score**: Average rating score (1-5) given by guests for listing.
- **Revenue**: Estimated revenue generated by the listing over past 365 days.
- **accommodates**: Number of guests listing can accommodate.
""")

st.sidebar.header("Filters")

# Neighborhood filter (only single select unfortunately)
neighborhood = st.sidebar.selectbox("Neighbourhood", ["All"] + sorted(filtered_data['neighbourhood_cleansed'].unique()))
if neighborhood == "All":
    neighborhoods = filtered_data['neighbourhood_cleansed'].unique()
else:
    neighborhoods = [neighborhood]
# Room type filter (multi-select)
all_room_types = sorted(filtered_data['room_type'].unique())
room_types = st.sidebar.multiselect("Room Type(s)", options=all_room_types, default=all_room_types)
# Review score and revenue filters
review_score_range = st.sidebar.slider("Review Score Range", 1.0, 5.0, (1.0, 5.0))
revenue_range = st.sidebar.slider("Revenue Range",
                                  int(filtered_data['estimated_revenue_l365d'].min()),
                                  int(filtered_data['estimated_revenue_l365d'].max()),
                                  (1000, 100000))

filtered = filtered_data[
    (filtered_data['review_scores_rating'].between(*review_score_range)) &
    (filtered_data['estimated_revenue_l365d'].between(*revenue_range)) &
    (filtered_data['neighbourhood_cleansed'].isin(neighborhoods)) &
    (filtered_data['room_type'].isin(room_types))
]

# Stacked Bar Chart of Average Revenue by Neighborhood and Room Type
st.subheader("Stacked Bar Chart: Average Revenue by Neighbourhood and Room Type")
mean_revenue = filtered.groupby(['neighbourhood_cleansed', 'room_type'])['estimated_revenue_l365d'].mean().reset_index()
bar_chart = alt.Chart(mean_revenue).mark_bar().encode(
    x=alt.X('neighbourhood_cleansed:N', sort='-y', title='Neighbourhood'),
    y=alt.Y('estimated_revenue_l365d:Q', title='Avg Revenue'),
    color=alt.Color('room_type:N', title='Room Type'),
    tooltip=['neighbourhood_cleansed', 'room_type', 'estimated_revenue_l365d']
)
st.altair_chart(bar_chart, use_container_width=True)

# Review Score vs Revenue Scatterplot w/ Zooming and Panning
st.subheader("Scatterplot: Review Score vs Estimated Revenue")
scatter1 = alt.Chart(filtered).mark_circle(opacity=0.4, size=60).encode(
    x=alt.X('review_scores_rating:Q', scale=alt.Scale(domain=[1, 5]), title='Review Score'),
    y=alt.Y('estimated_revenue_l365d:Q', scale=alt.Scale(type='log'), title='Log(Revenue)'),
    color='room_type:N',
    tooltip=['name', 'neighbourhood_cleansed', 'room_type', 'review_scores_rating', 'estimated_revenue_l365d']
).interactive()
st.altair_chart(scatter1, use_container_width=True)

# Accommodates vs Revenue Scatterplot w/ Zooming and Panning
st.subheader("Scatterplot: Accommodates vs Estimated Revenue")
scatter2 = alt.Chart(filtered).mark_circle(opacity=0.4, size=60).encode(
    x='accommodates:Q',
    y=alt.Y('estimated_revenue_l365d:Q', scale=alt.Scale(type='log'), title='Log(Revenue)'),
    color='neighbourhood_cleansed:N',
    tooltip=['name', 'neighbourhood_cleansed', 'room_type', 'accommodates', 'estimated_revenue_l365d']
).interactive()
st.altair_chart(scatter2, use_container_width=True)
